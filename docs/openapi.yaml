openapi: 3.0.0
info:
  contact:
    email: msmariaulfa33@gmail.com
  version: 0.0.1
  title: DNR Service Swagger Docs
  description: Service for DNR Website
servers:
  - description: Local development
    url: 'http://localhost:3001'
tags:
  - name: bank-account
  - name: cart
  - name: cart-batch
  - name: error
  - name: healthcheck
  - name: order
  - name: outlet
  - name: product
  - name: root
  - name: user
  - name: payment-callback
  - name: payment-terms
  - name: notification
  - name: banner
  - name: flash-sale
  - name: news
  - name: branch
  - name: outlet-types
  - name: promotion
paths:
  /:
    get:
      description: Endpoint for Healthcheck of Root
      tags:
        - root
      operationId: getRoot
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Root'
  /healthcheck/liveness:
    get:
      description: Endpoint for Healthcheck of Application
      tags:
        - healthcheck
      operationId: getLiveness
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
  /healthcheck/readiness:
    get:
      description: Endpoint for Healthcheck of Database
      tags:
        - healthcheck
      operationId: getReadiness
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
  /error/{errorCode}':
    get:
      description: Endpoint for Healthcheck of Database
      tags:
        - error
      operationId: getErrorExample
      parameters:
        - name: errorCode
          in: path
          description: Error HTTP code
          required: true
          schema:
            type: string
            enum:
              - 200
              - 400
              - 403
              - 404
              - 422
              - 500
      responses:
        200:
          description: 'default response, instruction to use this endpoint'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/users/register:
    post:
      tags:
        - user
      summary: Register
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-request'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User-info'
                  - $ref: '#/components/schemas/User-session'
              examples: {}
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Registration endpoint. Will create user object with email and password
  /api/v1/users/login_email:
    post:
      tags:
        - user
      summary: Login by Email
      operationId: loginEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login-email'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User-info'
                  - $ref: '#/components/schemas/User-session'
              examples: {}
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Login endpoint. Will authenticate user with email and password
  /api/v1/admin/users/login_admin:
    post:
      tags:
        - user
      summary: Login by Email for admin
      operationId: loginEmailAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login-email'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User-info'
                  - $ref: '#/components/schemas/User-session'
              examples: {}
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Login endpoint. Will authenticate user with email and password
  /api/v1/users/login_google:
    post:
      tags:
        - user
      summary: Login by Google
      operationId: loginByGoogle
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                google_token:
                  type: string
                  example: 1234567890abcdefghijklmnopqrstuvwz
              required:
                - google_token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User-info'
                  - $ref: '#/components/schemas/User-info-google'
                  - $ref: '#/components/schemas/User-session'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: login endpoint. Will authenticate user by google email
  /api/v1/users/{id}:
    get:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: just type it id
      description: Get user login info
      security:
        - ApiKeyAuth: []
      tags:
        - user
      summary: Get Login User Data
      operationId: getUserByAuthToken
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-info'
    patch:
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: just type it id
      description: Update User login
      security:
        - ApiKeyAuth: []
      tags:
        - user
      summary: Update user info
      operationId: updateUserByAuthToken
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User-update-request'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-info'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/users/password/id:
    patch:
      description: Update User Login Password
      security:
        - ApiKeyAuth: []
      tags:
        - user
      summary: Update User Password
      operationId: updateUserPasswordByAuthToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-update-password'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-info'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/users/verified_email_token:
    post:
      tags:
        - user
      summary: Verified email token that send to user email
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verified-user-email'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '400':
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/users/resend_email_verification:
    post:
      tags:
        - user
      summary: resend email verification notif
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: mail@mail.com
              required:
                - email
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '400':
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/users/verification_check:
    get:
      tags:
        - user
      summary: Checking verification of a user
      operationId: verification_check
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-Verified'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '400':
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/users/register_sap:
    post:
      tags:
        - user
      summary: Register DNR User to SAP
      operationId: register_sap
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  customer:
                    $ref: '#/components/schemas/customer_sap'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Registration endpoint. Will create user object with email and password
  /api/v1/users/chats:
    post:
      tags:
        - user
      summary: chat for user
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-chat'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '400':
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/users/chats/read:
    post:
      tags:
        - user
      summary: chat for user
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '400':
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/users/forgot-password:
    post:
      tags:
        - user
      summary: Request for reset password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/users/forgot-password/{token}:
    post:
      tags:
        - user
      summary: Verify token and request new password
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password:
                  type: string
                confirmation_password:
                  type: string
              required:
                - new_password
                - confirmation_password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        '500':
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/users/import-excel:
    post:
      tags:
        - users
      operationId: uploadExcel
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        '500':
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/outlets:
    post:
      tags:
        - outlet
      summary: Outlet Creation
      operationId: createOutlet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Outlet-request'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outlet'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Register Outlet for User
  /api/v1/outlets/{outlet_id}:
    patch:
      tags:
        - outlet
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: outlet_id
          schema:
            type: string
          required: true
      summary: Outlet Creation
      operationId: updateOutlet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Outlet-request'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outlet'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Update Outlet for User
    get:
      tags:
        - outlet
      parameters:
        - in: path
          name: outlet_id
          schema:
            type: string
          required: true
      summary: Get User Outlet
      operationId: getOutletByAuthToken
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outlet'
        '400':
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Update Outlet for User
  /api/v1/admin/users/customer_id:
    post:
      description: Update user customer id
      tags:
        - admin
      summary: Update customer id
      operationId: updateCustomerId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                noref_dplus:
                  type: string
                customer_id:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-info'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/admin/users/{id}/get-receipt:
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get Receipt by User Id
      operationId: getReceiptForAdmin
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order-receipt'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - order
      description: Endpoint to get faktur with matching id
  /api/v1/admin/users/{email}:
    get:
      description: Get User by ID. to get user login info
      security:
        - ApiKeyAuth: []
      tags:
        - admin
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
      summary: Get Login User by ID for Admin
      operationId: getUserById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-info'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
    patch:
      description: Update User by ID for Admin
      security:
        - ApiKeyAuth: []
      tags:
        - admin
      parameters:
        - in: path
          name: email
          schema:
            type: string
          required: true
      summary: Update user info
      operationId: updateUserById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-admin-update'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-info'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/admin/users:
    get:
      description: Get All users for admin
      parameters:
        - schema:
            type: string
          in: query
          name: page
          description: Get users page use for pagination
        - schema:
            type: string
          in: query
          name: limit
          description: Limit the return users
        - schema:
            type: string
          in: query
          name: search
          allowReserved: true
          description: search query according to the type
        - schema:
            type: string
          in: query
          name: type
          allowReserved: true
          description: filter the search query
        - schema:
            type: string
          in: query
          name: email
          allowReserved: true
          description: query by email
        - schema:
            type: string
          in: query
          name: name
          allowReserved: true
          description: query by name
        - schema:
            oneOf:
              - type: string
              - type: array
          in: query
          name: role_status
        - schema:
            type: string
          in: query
          name: role
        - schema:
            oneOf:
              - type: string
              - type: array
          in: query
          name: ids
      security:
        - ApiKeyAuth: []
      tags:
        - admin
      summary: Get All User for Admin
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  totalPage:
                    type: integer
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User-info'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/admin/users/register_admin:
    post:
      tags:
        - admin
      security:
        - ApiKeyAuth: []
      summary: Register Admin
      operationId: registerAdmin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-request-admin'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User-info'
                  - $ref: '#/components/schemas/User-session'
              examples: {}
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Registration endpoint. Will create user object with email and password
  /api/v1/admin/users/chats/read:
    post:
      tags:
        - admin
      summary: read chat for admin
      security:
        - ApiKeyAuth: []
      operationId: adminChatRead
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin-chat-read'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '400':
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/admin/users/chats:
    post:
      tags:
        - admin
      summary: chat for admin
      security:
        - ApiKeyAuth: []
      operationId: adminChat
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin-chat'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        '400':
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/auth/refresh_token:
    post:
      description: refresh auth endpoint
      tags:
        - user
      summary: Refresh Auth Token
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: 1234567890abcdefghijklmnopqrstuvwz
              required:
                - refresh_token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User-info'
                  - $ref: '#/components/schemas/User-session'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
              examples: {}
  /api/v1/auth/logout:
    post:
      security:
        - ApiKeyAuth: []
      tags:
        - user
      summary: Logout
      operationId: logout
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OK
                required:
                  - message
      description: Logout Endpoint to Clear the auth
  /api/v1/products:
    get:
      summary: Get Products with Filter
      operationId: getProducts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  totalPage:
                    type: integer
                  totalProduct:
                    type: integer
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product-summary'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Get array of product by multiple search queries
      parameters:
        - schema:
            type: string
          in: query
          name: category
          description: Get product by category name
        - schema:
            type: string
          in: query
          allowReserved: true
          name: name
          description: Get product by product name
        - schema:
            type: string
          in: query
          name: company_name
          description: Get product by product's company_name
        - schema:
            type: string
          in: query
          name: slug
          description: Get product by product's slug
        - schema:
            type: string
          in: query
          name: page
          description: Get product page use for pagination
        - schema:
            type: string
          in: query
          name: limit
          description: Limit the return product
        - schema:
            type: string
            example: PRICE
            enum:
              - PRICE
              - NAME
              - RATE
              - DISCOUNT
              - TOP_SALES
          in: query
          name: sort_by
          description: Indicating field for sorting the result
        - schema:
            type: string
            enum:
              - ASC
              - DESC
            example: ASC
          in: query
          name: order
          description: Indicating sorting
        - schema:
            type: string
          in: query
          name: min_price
          description: Filtering the minimum price
        - schema:
            type: string
          in: query
          name: max_price
          description: Filtering the maximum price
        - schema:
            type: string
          in: query
          name: rating
          description: Filtering the maximum price
      tags:
        - product
    parameters: []
  /api/v1/products/top-product:
    get:
      summary: Get Top perfoming products
      operationId: getTopProduct
      parameters:
        - schema:
            type: string
          in: query
          name: limit
          description: Limit the flash product return
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product-top'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Get array of product by multiple search queries
      tags:
        - product
    parameters: []
  /api/v1/products/{productId}:
    get:
      summary: Get Product By Id
      operationId: getProductById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      parameters: []
      description: Get single product by Id
      tags:
        - product
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
        description: Id of the product
  /api/v1/products/favorites:
    get:
      summary: Get Product Favorites For User
      operationId: getProductFavoritesForUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  totalPage:
                    type: integer
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product-summary'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      parameters:
        - schema:
            type: string
          in: query
          name: page
          description: Get product page use for pagination
        - schema:
            type: string
          in: query
          name: limit
          description: Limit the return product
        - schema:
            type: string
            example: PRICE
            enum:
              - PRICE
              - NAME
              - RATE
              - DISCOUNT
          in: query
          name: sort_by
          description: Indicating field for sorting the result
        - schema:
            type: string
            enum:
              - ASC
              - DESC
            example: ASC
          in: query
          name: order
          description: Indicating sorting method
      description: Get list of product favorites
      tags:
        - product
  /api/v1/products/{productId}/favorites:
    post:
      summary: Add a Product to favorites
      operationId: addProductFavorites
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Add product to favorites
      tags:
        - product
    delete:
      summary: Delete product favorites
      operationId: deleteProductFavorites
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      parameters: []
      description: Delete product from favorites
      tags:
        - product
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
        description: Id of the product
  /api/v1/admin/products:
    get:
      summary: Get Products with Filter for Admin
      operationId: getProductsForAdmin
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  totalPage:
                    type: integer
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product-summary'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Get array of product by multiple search queries
      parameters:
        - schema:
            type: string
          in: query
          name: category
          description: Get product by category name
        - schema:
            type: string
          in: query
          name: name
          allowReserved: true
          description: Get product by product name
        - schema:
            type: string
          in: query
          name: company_name
          description: Get product by product's company_name
        - schema:
            type: string
          in: query
          name: slug
          description: Get product by product's slug
        - schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
          in: query
          name: status
          description: Get product by product's status
        - schema:
            type: string
          in: query
          name: page
          description: Get product page use for pagination
        - schema:
            type: string
          in: query
          name: limit
          description: Limit the return product
        - schema:
            type: string
            example: PRICE
            enum:
              - PRICE
              - NAME
              - RATE
              - DISCOUNT
          in: query
          name: sort_by
          description: Indicating field for sorting the result
        - schema:
            type: string
            enum:
              - ASC
              - DESC
            example: ASC
          in: query
          name: order
          description: Indicating sorting method
      tags:
        - admin
    post:
      summary: Add a New Product for Admin
      operationId: addProduct
      responses:
        201:
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples: {}
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Product-create'
            examples: {}
          text/plain:
            schema:
              type: object
              properties: {}
        description: Post the necessary fields for the API to create a new product.
      description: Add a new product
      tags:
        - product
    parameters: []
  /api/v1/admin/products/upload:
    post:
      summary: Create a New Product for Admin
      operationId: uploadProduct
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Create a new category
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      tags:
        - product

  /api/v1/admin/products/{productId}:
    get:
      summary: Get Product By Id for Admin
      operationId: getProductByIdForAdmin
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      parameters: []
      description: Get single product by Id
      tags:
        - product
    patch:
      summary: Update Product For Admin
      operationId: updateProductById
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Update product by Id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product-update'
        description: ''
      tags:
        - admin
    parameters:
      - schema:
          type: string
        name: productId
        in: path
        required: true
        description: Id of the product
  /api/v1/admin/products/{product_id}/upload:
    patch:
      tags:
        - upload
      parameters:
        - in: path
          name: product_id
          schema:
            type: string
          required: true
      summary: upload product photo
      operationId: uploadProductPhoto
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Product-summary'
              examples: {}
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Upload images for product
  /api/v1/admin/products/images/{image_id}:
    parameters:
      - schema:
          type: string
        name: image_id
        in: path
        required: true
        description: id of product images
    delete:
      summary: Delete product image for Admin
      operationId: deleteProductImageForAdmin
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      parameters: []
      description: Delete product image by Id
      tags:
        - product
  /api/v1/admin/products/sync-product:
    post:
      summary: Sync product data with SAP
      operationId: syncProduct
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Add a new product
      tags:
        - product
    parameters: []
  /api/v1/categories:
    get:
      summary: Get All Categories
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      operationId: getCategories
      description: Get all categories
      tags:
        - product
  /api/v1/admin/categories:
    get:
      summary: Get All Categories for Admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      operationId: getCategoriesForAdmin
      description: Get all categories
      tags:
        - admin
      security:
        - ApiKeyAuth: []
    post:
      summary: Create a New Category for Admin
      operationId: addCategory
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Create a new category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category-create-update'
      tags:
        - product
    parameters: []
  /api/v1/admin/categories/upload:
    post:
      summary: Create a New Category for Admin
      operationId: uploadCategory
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Create a new category
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      tags:
        - product
  /api/v1/admin/categories/{categoryId}:
    parameters:
      - schema:
          type: string
        name: categoryId
        in: path
        required: true
    get:
      summary: Get Category by Id for Admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      operationId: getCategoryByIdForAdmin
      description: Get one category with matching ID
      tags:
        - admin
      security:
        - ApiKeyAuth: []
    patch:
      summary: Update Category for Admin
      operationId: updateCategoryById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Update one category with matching ID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category-create-update'
      tags:
        - product
    delete:
      summary: Delete a category for Admin
      operationId: removeCategory
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - product
  /api/v1/bank_accounts:
    post:
      summary: Create a New Bank Account
      operationId: addBankAccount
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bank-account'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Create a new bank account
      tags:
        - bank-account
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bank-account-create'
    get:
      summary: Get Bank Accounts for User
      operationId: getBankAccountsForUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bank-account'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: >-
        Get bank account for user id. Will only return bank account associated
        with the login user
      parameters:
        - schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
          in: query
          name: status
          description: >-
            Filter for bank account status. Will return all status if not
            provided
      tags:
        - bank-account
  /api/v1/bank_accounts/{bankAccountId}:
    get:
      summary: Get Bank Account by Id
      tags:
        - bank-account
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bank-account'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      operationId: getBankAccountById
      description: Get one bank account with matching id
    patch:
      summary: Update Bank Account
      operationId: updateBankAccountById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bank-account'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - bank-account
      description: Update one bank account with matching id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bank-account-update'
    delete:
      summary: Delete bank account
      operationId: deleteBankAccountById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bank-account'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Mark bank account as inactive
      tags:
        - bank-account
    parameters:
      - schema:
          type: string
        name: bankAccountId
        in: path
        required: true
  /api/v1/outlet_addresses:
    get:
      summary: Get Outlet Addresses for User
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Outlet-address'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      operationId: getOutletAddressForUser
      description: Get list of address for login users
      parameters:
        - schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
          in: query
          name: status
          description: >-
            Filter for outlet address status. Will return all status if not
            provided
      tags:
        - outlet
    parameters: []
    post:
      summary: Create Outlet Address
      operationId: addOutletAddress
      security:
        - ApiKeyAuth: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outlet-address'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Create a new outlet address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Outlet-address-create-update'
      tags:
        - outlet
  /api/v1/outlet_addresses/{outletAddressId}:
    parameters:
      - schema:
          type: string
        name: outletAddressId
        in: path
        required: true
    get:
      summary: Get Outlet Address by Id
      operationId: getOutletAddressById
      description: Get one outlet address with matching id
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outlet-address'
        401:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - outlet
    patch:
      summary: Update Outlet Address
      operationId: updateOutletAddressById
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outlet-address'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Update one outlet address with matching id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Outlet-address-create-update'
      tags:
        - outlet
    delete:
      summary: Delete Outlet Address
      operationId: delete-outlet_address-outletAddressId
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outlet-address'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Mark outlet address as inactive
      tags:
        - outlet
  /api/v1/outlet_addresses/{userId}/is_exist:
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get Outlet Address by userId
      operationId: getOutletAddressByUserId
      description: Get one outlet address with matching user id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Boolean'
        401:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - outlet
  /api/v1/outlet_addresses/{outletAddressId}/set_main:
    parameters:
      - schema:
          type: string
        name: outletAddressId
        in: path
        required: true
    post:
      summary: Set Outlet Address as Main Address
      operationId: setOutletAddressAsMain
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outlet-address'
        '404':
          description: Not Found
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Set outlet address as main address
      tags:
        - outlet
  /api/v1/admin/stocks:
    get:
      summary: Get Stocks by Product for Admin
      tags:
        - product
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stock'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      operationId: getStockByProductForAdmin
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: productId
          required: true
      description: Admin endpoint to get list stocks for a product
      security:
        - ApiKeyAuth: []
    post:
      summary: Create Stock
      operationId: addStock
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - admin
      security:
        - ApiKeyAuth: []
      description: Admin endpoint to create a new warehouse/stock
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stock-create-update'
  '/api/v1/admin/stocks/{stocksId}':
    parameters:
      - schema:
          type: string
        name: stocksId
        in: path
        required: true
    patch:
      summary: Update Stock
      operationId: updateStock
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - admin
      security:
        - ApiKeyAuth: []
      description: Admin endpoint to update stock
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stock-create-update'
  /api/v1/stocks:
    get:
      summary: Get Stocks by Product
      tags:
        - product
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stock'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      operationId: getStockByProduct
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: productId
          required: true
      description: Admin endpoint to get list stocks for a product
    parameters: []
  /api/v1/carts:
    get:
      summary: Get Carts For User
      security:
        - ApiKeyAuth: []
      tags:
        - cart
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      operationId: getCartsForUser
      description: >-
        Endpoint to get all carts for the login user filtered by status. Default
        will return all statuses
      parameters:
        - schema:
            type: string
            enum:
              - ACTIVE
              - DELETED
              - ORDERED
          in: query
          name: status
          description: 'Status of cart '
    post:
      summary: Create Carts
      operationId: addCart
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        401:
          description: example error 401 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
      description: Endpoint to add a product to user's cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart-create'
      tags:
        - cart
  /api/v1/carts/qty/{id}:
    patch:
      summary: Update Cart Qty By Id
      security:
        - ApiKeyAuth: []
      tags:
        - cart
      operationId: updateCartQtyById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart-update-qty'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Endpoint to update cart quantity
  '/api/v1/carts/{cartId}':
    get:
      summary: Get Cart By Id
      security:
        - ApiKeyAuth: []
      tags:
        - cart
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      operationId: getCartById
      description: Endpoint to get cart with matching Id
      parameters: []
    parameters:
      - schema:
          type: string
          format: uuid
        name: cartId
        in: path
        required: true
    patch:
      summary: Update Cart By Id
      operationId: updateCartById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Endpoint to update cart location or quantity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart-update'
      tags:
        - cart
    delete:
      summary: Delete Cart by Id
      operationId: deleteCartById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - cart
      description: Endpoint to soft delete cart by id
  /api/v1/carts_batch:
    get:
      description: Get All batch numbers
      tags:
        - cart-batch
      summary: List all batch numbers registered of products in the carts
      operationId: getCartsBatch
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart-batch'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
    post:
      description: Create a product batch of products on the cart
      tags:
        - cart-batch
      summary: Create a product batch
      operationId: createCartBatch
      security:
        - ApiKeyAuth: []
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart-batch'
  /api/v1/carts_batch/{id}:
    get:
      description: Get All batch numbers by corresponding cart id
      tags:
        - cart-batch
      summary: List all batch numbers registered of products in the carts
      operationId: getCartsBatchByCartId
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart-batch'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
    patch:
      summary: Update a batch by Id
      operationId: updateCartBatch
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart-batch-id'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
    delete:
      summary: Delete Batch by Id
      operationId: deleteBatchById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart-batch'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
      tags:
        - cart-batch
  /api/v1/orders:
    post:
      summary: Create Orders
      operationId: createOrder
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Endpoint to create an order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order-create'
      tags:
        - order
    parameters: []
    get:
      summary: Get Orders For User
      operationId: getOrdersForUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order-summary'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - order
      description: Endpoint to get list orders for the login user
      parameters:
        - schema:
            type: string
            enum:
              - ORDERED
              - PAID
              - CANCELED
              - EXPIRED
              - PROCESSED
              - COMPLETED
              - DELIVERED
              - ONGOING
          in: query
          name: status
  '/api/v1/orders/{orderId}':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    get:
      summary: Get Order By Id
      operationId: getOrderById
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - order
      description: Endpoint to get order with matching id
      parameters: []
    patch:
      summary: Update Order By Id
      operationId: updateOrderById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - order
      description: Endpoint to update an order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order-update'
  '/api/v1/orders/{orderId}/charge':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    post:
      summary: Charge Card Payment
      operationId: chargeCardPayment
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Charge-payment-success'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Card-charge-payment'
      description: Endpoint to charge payment card
      tags:
        - order
  '/api/v1/orders/{orderId}/cancel':
    post:
      summary: Cancel Orders
      operationId: cancelOrder
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Endpoint to cancel an order
      tags:
        - order
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
  '/api/v1/orders/{orderId}/complete':
    post:
      summary: Complete Orders
      operationId: completeOrder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Endpoint to complete an order
      tags:
        - order
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
  /api/v1/admin/orders:
    parameters: []
    get:
      summary: Get Orders For Admin
      operationId: getOrdersForAdmin
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  totalPage:
                    type: integer
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order-summary'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - admin
      description: Admin endpoint to get orders
      parameters:
        - schema:
            type: string
            enum:
              - ORDERED
              - CANCELED
              - PROCESSED
              - COMPLETED
              - DELIVERED
              - ONGOING
          in: query
          name: status
        - schema:
            type: string
          in: query
          name: page
          description: Get product page use for pagination
        - schema:
            type: string
          in: query
          name: limit
          description: Limit the return product
        - schema:
            type: string
          in: query
          name: search
          description: Limit the return product
  /api/v1/admin/orders/{id}:
    get:
      summary: Get Orders For Admin
      operationId: getOrdersForAdmin
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  totalPage:
                    type: integer
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order-summary'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - admin
      description: Admin endpoint to get orders
    patch:
      summary: input invoice number by payment Id
      operationId: inputInvoiceNumber
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment-invoice'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/admin/orders/{transactionNumber}/update-cart:
    patch:
      summary: Update Product on Invoice
      operationId: updateCartById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Endpoint to update cart location or quantity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart-invoice-update'
      tags:
        - cart
  /api/v1/admin/orders/{transactionNumber}:
    parameters:
      - schema:
          type: string
        name: transactionNumber
        in: path
        required: true
    get:
      summary: Get Order By Id
      operationId: getOrderByIdAdmin
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - order
      description: Endpoint to get order with matching id
    patch:
      summary: Update Product on Invoice
      operationId: updateCartById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Endpoint to update cart location or quantity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart-invoice-update'
      tags:
        - cart
  /api/v1/admin/orders/{transactionNumber}/delete-product:
    parameters:
      - schema:
          type: string
        name: transactionNumber
        in: path
        required: true
    delete:
      summary: Delete Cart by Id
      operationId: deleteCartById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
      tags:
        - cart
      description: Endpoint to soft delete invoice cart by id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cart_id:
                  type: string
                  format: uuid
              required:
                - cart_id
  /api/v1/admin/orders/{transactionNumber}/add-product:
    parameters:
      - schema:
          type: string
        name: transactionNumber
        in: path
        required: true
    post:
      summary: Add New Product to Invoice
      operationId: addProductToInvoice
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        401:
          description: example error 401 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Response'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
      description: Endpoint to add a product to user's invoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart-create'
      tags:
        - cart
  /api/v1/admin/orders/{transactionNumber}/get-faktur:
    parameters:
      - schema:
          type: string
        name: transactionNumber
        in: path
        required: true
    get:
      summary: Get Faktur By Trx Number
      operationId: getFakturForAdmin
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order-faktur'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - order
      description: Endpoint to get faktur with matching id
  /api/v1/admin/orders/{transactionNumber}/cancel:
    post:
      summary: Cancel Orders For Admin
      operationId: cancelOrderForAdmin
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      description: Admin endpoint to cancel an order
      tags:
        - admin
    parameters:
      - schema:
          type: string
        name: transactionNumber
        in: path
        required: true
  /api/v1/admin/orders/{transactionNumber}/complete_payment:
    post:
      summary: Complete Payment For Admin
      operationId: completePaymentOrder
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Admin endpoint to mark order as paid
      tags:
        - admin
    parameters:
      - schema:
          type: string
        name: transactionNumber
        in: path
        required: true
  /api/v1/admin/orders/{transactionNumber}/delivered:
    post:
      summary: Delivered Orders For Admin
      operationId: deliveredOrder
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                receiver_name:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'

      description: Admin endpoint to mark order status as processed
      tags:
        - admin
    parameters:
      - in: query
        name: paid
        schema:
          type: boolean
      - in: path
        name: transactionNumber
        required: true
        schema:
          type: string
  /api/v1/admin/orders/{transactionNumber}/ongoing:
    post:
      summary: Delivering Orders Users For Admin
      operationId: ongoingOrder
      parameters:
        - in: path
          name: transactionNumber
          required: true
          schema:
            type: string
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                faktur:
                  type: string
      tags:
        - admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/admin/orders/{transactionNumber}/refund:
    post:
      summary: Update status Refund Payment Users For Admin
      operationId: refundOrder
      parameters:
        - in: path
          name: transactionNumber
          required: true
          schema:
            type: string
      security:
        - ApiKeyAuth: []
      tags:
        - admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  '/api/v1/admin/orders/{transactionNumber}/invoice':
    get:
      summary: Generate Invoice for Admin
      operationId: generateAdminInvoice1
      responses:
        '200':
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - admin
    parameters:
      - schema:
          type: string
        name: transactionNumber
        in: path
        required: true
  /api/v1/admin/orders/{transactionNumber}/faktur:
    get:
      summary: Generate Faktur for Admin
      operationId: generateAdminFaktur
      responses:
        200:
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - admin
    parameters:
      - schema:
          type: string
        name: transactionNumber
        in: path
        required: true
  '/api/v1/orders/{transactionNumber}/invoice':
    get:
      summary: Generate Invoice for Admin
      operationId: generateAdminInvoice
      responses:
        '200':
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      tags:
        - admin
    parameters:
      - schema:
          type: string
        name: transactionNumber
        in: path
        required: true
  '/api/v1/payment_callback':
    post:
      summary: Callback Endpoint to receive payment notification from xendit
      operationId: paymentCallback
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
        '400':
          description: Invalid Credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: payment callback endpoint
      tags:
        - payment-callback
  /api/v1/payment_terms:
    get:
      description: Get All Payment Terms
      tags:
        - payment-terms
      summary: List all Payment Terms
      operationId: getPaymentTerms
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment-terms'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
    post:
      description: Find payment term by filtering
      tags:
        - payment-terms
      summary: Find payment term by filtering
      operationId: filterPaymentTerm
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment-terms'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment-terms'
  /api/v1/payment_terms/create:
    post:
      description: Create a payment term
      tags:
        - payment-terms
      summary: Create a term of payment
      operationId: createPaymentTerm
      security:
        - ApiKeyAuth: []
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment-terms'
  /api/v1/payment_terms/{id}:
    get:
      description: Get Payment Terms By Id
      summary: Get Payment Terms By Id
      operationId: getPaymentTermsById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment-terms'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
      tags:
        - payment-terms
    put:
      summary: Update payment term
      operationId: updatePaymentTerm
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment-terms-update'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment-terms'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
    patch:
      summary: Change payment term status
      operationId: changePaymentTerm
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment-terms-change'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment-terms'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/payment_terms/active:
    get:
      description: Get All Payment Terms
      tags:
        - payment-terms
      summary: List all Payment Terms
      operationId: getPaymentTerms
      security:
        - ApiKeyAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment-terms'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
  /api/v1/users/profile_picture/upload:
    patch:
      tags:
        - upload
      summary: upload user photo
      operationId: uploadUser
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User-info'
              examples: {}
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Registration endpoint. Will create user object with email and password
  /api/v1/users/get_customer_detail:
    post:
      description: Get user customer info
      security:
        - ApiKeyAuth: []
      tags:
        - user
      summary: Get Login User Data
      operationId: getCustomerInfo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                customer_id:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-info'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/notifications:
    get:
      description: Get user existing notification
      security:
        - ApiKeyAuth: []
      tags:
        - notification
      summary: Get user existing notification
      operationId: getUserNotification
      parameters:
        - name: limit
          schema:
            type: string
          in: query
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification-List'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/notifications/{notificationId}:
    patch:
      description: Set one of user notification as seen
      security:
        - ApiKeyAuth: []
      tags:
        - notification
      summary: Set one of user notification as seen
      operationId: udpateUserNotification
      parameters:
        - name: notificationId
          schema:
            type: string
          in: path
          required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification-List'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/admin/report:
    get:
      description: Get admin general report
      security:
        - ApiKeyAuth: []
      tags:
        - notification
      summary: Get admin general report
      operationId: getAdminReport
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  active_user:
                    type: number
                  total_sales:
                    type: number
                  total_transaction:
                    type: number
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/banners:
    get:
      description: Get all active banner
      tags:
        - banner
      summary: Get all active banner
      operationId: getAllBanner
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Banner-List'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/banners/{bannerId}:
    delete:
      description: Delete a Banner
      tags:
        - banner
      summary: Delete a Banner
      operationId: deleteBanner
      parameters:
        - name: bannerId
          schema:
            type: string
          in: path
          required: true
      responses:
        204:
          description: OK
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/product_reviews/{productId}:
    get:
      description: Get a product review
      tags:
        - product
      summary: Get a product review
      operationId: getProductReview
      parameters:
        - name: productId
          schema:
            type: string
          in: path
          required: true
        - schema:
            type: string
          in: query
          name: page
          description: Get review page use for pagination
        - schema:
            type: string
          in: query
          name: limit
          description: Limit the return of the review
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  totalPage:
                    type: integer
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product-review'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/product_reviews:
    post:
      description: Create a new product review
      tags:
        - product
      summary: Create a new product review
      operationId: createProductReview
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product-review-create'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product-review'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/admin/product_reviews/{reviewId}:
    delete:
      description: Delete a Product Review
      tags:
        - banner
      summary: Delete a Product Review
      operationId: deleteProductReview
      parameters:
        - name: reviewId
          schema:
            type: string
          in: path
          required: true
      responses:
        204:
          description: OK
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/flash-sales:
    get:
      description: Get current active flash sale
      tags:
        - flash-sale
      summary: Get current active flash sale
      operationId: getCurrentFlashSale
      parameters:
        - schema:
            type: string
          in: query
          name: limit
          description: Limit the flash product return
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flash-sale'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
  /api/v1/admin/flash-sales:
    get:
      description: Get all flash sale
      tags:
        - flash-sale
      summary: Get all flash sale
      operationId: getAllFlashSale
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flash-sale'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
    post:
      description: Create a new flash sale
      tags:
        - flash-sale
      summary: Create a flash sale
      operationId: createFlashSale
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flash-sale'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flash-sale-create'
  /api/v1/admin/flash-sales/{flashSaleId}:
    get:
      description: Get a flash sale
      tags:
        - flash-sale
      summary: Get a flash sale
      operationId: getFlashSaleById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flash-sale'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
    patch:
      description: Update a flash sale
      tags:
        - flash-sale
      summary: Update a flash sale
      operationId: updateFlashSaleById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flash-sale'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Flash-sale-create'
    parameters:
      - schema:
          type: string
        name: flashSaleId
        in: path
        required: true
  /api/v1/admin/flash-sales/{flashSaleId}/activate:
    post:
      description: Activate a flash sale
      tags:
        - flash-sale
      summary: Activate a flash sale
      operationId: activateFlashSaleById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flash-sale'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
    parameters:
      - schema:
          type: string
        name: flashSaleId
        in: path
        required: true
  /api/v1/admin/flash-sales/{flashSaleId}/deactivate:
    post:
      description: Disable a flash sale
      tags:
        - flash-sale
      summary: Disable a flash sale
      operationId: disableFlashSaleById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flash-sale'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
    parameters:
      - schema:
          type: string
        name: flashSaleId
        in: path
        required: true
  /api/v1/admin/flash-sales/{flashSaleId}/add-products:
    post:
      description: Add products to flash sale
      tags:
        - flash-sale
      summary: Add products to flash sale
      operationId: addProductToFlashSale
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flash-sale'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
    parameters:
      - schema:
          type: string
        name: flashSaleId
        in: path
        required: true
  /api/v1/admin/flash-sales/{flashSaleId}/remove-products:
    post:
      description: Remove products from flash sale
      tags:
        - flash-sale
      summary: Remove products to flash sale
      operationId: remoeProductFromFlashSale
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flash-sale'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
    parameters:
      - schema:
          type: string
        name: flashSaleId
        in: path
        required: true
  /api/v1/news:
    get:
      description: Get All News
      tags:
        - news
      summary: List all news
      operationId: getNews
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/News'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
    post:
      description: Create a news
      tags:
        - news
      summary: Create a news intake
      operationId: createNews
      security:
        - ApiKeyAuth: []
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News-create'
  /api/v1/news/{newsId}:
    get:
      description: Get News By Id
      summary: Get News By Id
      operationId: getNewsById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
      tags:
        - news
    delete:
      summary: Delete a news for Admin
      operationId: deleteNews
      security:
        - ApiKeyAuth: []
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
    put:
      summary: Update a news for Admin
      operationId: updateNews
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News-create'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      parameters:
        - schema:
            type: string
          name: newsId
          in: path
          required: true
  /api/v1/branch:
    get:
      description: Get All Branch
      tags:
        - Branch
      summary: List all Branch
      operationId: getBranch
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Branch'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
  /api/v1/branch/{sku}:
    get:
      description: Get Branch By Id
      summary: Get Branch By Id
      operationId: getBranchById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Branch'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
      tags:
        - Branch
  /api/v1/outlet_types:
    get:
      description: Get All Outlet Types
      tags:
        - outlet-types
      summary: Get All Outlet Types
      operationId: getOutletTypes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Outlet-types'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
    post:
      description: Create a new Outlet Type
      tags:
        - outlet-types
      summary: Create a new outlet types
      operationId: createOutletType
      security:
        - ApiKeyAuth: []
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outlet-types'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Outlet-types-create'
  /api/v1/outlet_types/{outletTypesId}:
    get:
      description: Get Outlet Types By Id
      summary: Get Outlet Types By Id
      operationId: getOutletTypesById
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outlet-types'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
      tags:
        - news
    delete:
      summary: Delete a Outlet Type for Admin
      operationId: deleteOutletTypes
      security:
        - ApiKeyAuth: []
      responses:
        204:
          description: OK
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
    put:
      summary: Update a Outlet Type for Admin
      operationId: updateOutletType
      security:
        - ApiKeyAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Outlet-types-create'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Outlet-types'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
    parameters:
      - schema:
          type: string
        name: outletTypesId
        in: path
        required: true
  /api/v1/promotions/code:
    get:
      description: Get All Promotions
      tags:
        - promotion
      summary: List all promotions
      operationId: getPromotions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Promotions'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
      parameters:
        - schema:
            type: string
          in: query
          name: bank
          allowReserved: true
          description: Get product by bank
        - schema:
            type: string
          in: query
          name: order_id
          allowReserved: true
          description: Order ID
  /api/v1/admin/promotions:
    get:
      description: Get All Promotions
      tags:
        - promotion
      summary: List all promotions
      operationId: getPromotions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                  totalPage:
                    type: integer
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Promotions'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
      parameters:
        - schema:
            type: string
          in: query
          name: name
          allowReserved: true
          description: Get product by promotion name
        - schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
          in: query
          name: status
          description: Get product by product's status
        - schema:
            type: string
          in: query
          name: page
          description: Get product page use for pagination
        - schema:
            type: string
          in: query
          name: limit
          description: Limit the return promotion
        - schema:
            type: string
            example: PRICE
            enum:
              - START_DATE
              - END_DATE
          in: query
          name: sort_by
          description: Indicating field for sorting the result
    post:
      description: Create a promotion
      tags:
        - promotions
      summary: Create a promotion
      operationId: createPromotion
      security:
        - ApiKeyAuth: []
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotions'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotions-create'
  /api/v1/admin/promotions/{promotionID}:
    get:
      description: Get Promotion by ID. to get promotion info
      security:
        - ApiKeyAuth: []
      tags:
        - promotion
      summary: Get Promotion by ID for Admin
      operationId: getPromotionById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotions'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
    patch:
      summary: Update Promotion For Admin
      operationId: updatePromotionById
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotions'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Update promotion by Id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotions'
        description: ''
      tags:
        - promotions
    post:
      description: Create a promotion
      tags:
        - promotions
      summary: Create a promotion detail
      operationId: createPromotion detail
      security:
        - ApiKeyAuth: []
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion-products'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        404:
          description: example error 404 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotions-products-create'
    delete:
      summary: Delete promotion
      operationId: deletePromotion
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      parameters: []
      description: Delete product from favorites
      tags:
        - product
  /api/v1/admin/promotions/detail/{promotionDetailID}:
    get:
      description: Get Promotion product detail by ID. to get promotion info
      security:
        - ApiKeyAuth: []
      tags:
        - promotion
      summary: Get Promotion Product by ID for Admin
      operationId: getPromotionProductById
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion-products'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
    patch:
      summary: Update Promotion product For Admin
      operationId: updatePromotionProducts
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion-products'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      description: Update promotion by Id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Promotion-products'
        description: ''
      tags:
        - promotions
    delete:
      summary: Delete promotion product
      operationId: deletePromotionProduct
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404Response'
        400:
          description: example error 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400Response'
        500:
          description: example error 500 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error500Response'
      parameters: []
      description: Delete product from favorites
      tags:
        - product

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-auth-token
  schemas:
    Healthcheck:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          example: OK
    Root:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: OK
    Error400Response:
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          type: string
          enum:
            - INVALID_API_KEY
            - API_VALIDATION_ERROR
            - CAN_NOT_REGISTER
            - CAN_NOT_LOGIN
            - UNAUTHORIZED_USER
            - OUTLET_CREATION_ERROR
            - CREATE_ORDER_ERROR
            - ADDRESS_NOT_FOUND
            - ADD_TO_CART_ERROR
            - UPDATE_ORDER_ERROR
            - COMPLETE_PAYMENT_ORDER_ERROR
            - CANCEL_ORDER_ERROR
            - COMPLETE_ORDER_ERROR
            - FLASH_SALE_ERROR
            - EXISTING_CUSTOMER_ID
            - RESET_PASSWORD_ERROR
            - NEWS_ERROR
            - OUTLET_TYPES_ERROR
            - PROMOTION_PRODUCTS_EXIST
            - PROMOTION_CODE_EXIST
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    Error404Response:
      type: object
      properties:
        errorCode:
          type: string
          enum:
            - NOT_FOUND_ERROR
            - USER_NOT_FOUND_ERROR
            - PRODUCT_NOT_FOUND_ERROR
            - ORDER_NOT_FOUND_ERROR
            - BANK_ACCOUNT_NOT_FOUND_ERROR
            - CART_NOT_FOUND_ERROR
            - VERIFICATION_EMAIL_ERROR
            - NOTIFICATION_NOT_FOUND_ERROR
            - FLASH_SALE_NOT_FOUND_ERROR
            - NEWS_ERROR
            - OUTLET_TYPES_ERROR
            - PROMOTION_NOT_FOUND_ERROR
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
      required:
        - errorCode
        - message
    Error500Response:
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          type: string
          enum:
            - INTERNAL_SERVER_ERROR
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    Error401Response:
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          type: string
          enum:
            - UNAUTHORIZED_ACTION
        message:
          type: string
        errors:
          $ref: '#/components/schemas/ArrayOfErrors'
    ArrayOfErrors:
      nullable: true
      type: array
      items:
        oneOf:
          - type: string
          - type: object
    Bank-account-create:
      title: BankAccountCreate
      type: object
      description: User input schema for creating bank account
      properties:
        bank_name:
          type: string
        account_number:
          type: string
        account_name:
          type: string
        branch_name:
          type: string
      required:
        - bank_name
        - account_number
        - account_name
        - branch_name
    Bank-account-update:
      title: BankAccountUpdate
      type: object
      description: User input schema for updating bank account
      properties:
        bank_name:
          nullable: true
          type: string
        account_number:
          nullable: true
          type: string
        account_name:
          nullable: true
          type: string
        branch_name:
          nullable: true
          type: string
        status:
          nullable: true
          type: string
    Cart-create:
      title: CartCreate
      type: object
      description: User input when cart is created
      properties:
        product_id:
          type: string
          format: uuid
        location:
          type: string
        quantity:
          type: number
      required:
        - product_id
        - location
        - quantity
    Cart-summary:
      title: Cart
      type: object
      description: Model representing summary of user's cart for order
      properties:
        id:
          type: string
          format: uuid
        location:
          type: string
          description: location of the source warehouse
        product:
          $ref: '#/components/schemas/Product-summary'
        quantity:
          type: number
        final_unit_price:
          type: number
      required:
        - id
        - location
        - product
        - quantity
    Cart-update:
      title: CartUpdate
      type: object
      description: User input when cart is updated
      properties:
        location:
          type: string
        quantity:
          type: number
    Cart-update-qty:
      title: CartUpdateQty
      type: object
      description: User input when cart item qty is updated
      properties:
        quantity:
          type: number
    Cart-invoice-update:
      title: InvoiceCartUpdate
      type: object
      description: User input when invoice cart is updated
      properties:
        cart_id:
          type: string
          format: uuid
        location:
          type: string
        quantity:
          type: number
      required:
        - cart_id
    Category-create-update:
      title: CategoryCreateUpdate
      type: object
      x-examples:
        - name: Kesehatan
          icon_url: category/medicine.jpeg
      description: User input schema for categories
      properties:
        name:
          type: string
        icon_url:
          type: string
      required:
        - name
    Category-summary:
      title: Category
      type: object
      description: Model representing category info for product response
      x-examples:
        Kesehatan:
          value:
            id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
            name: Kesehatan
            icon_url: category/medicine.jpeg
            created: '2019-08-24T14:15:22Z'
            updated: '2019-08-24T14:15:22Z'
      properties:
        name:
          type: string
          description: Name of the category. This value should be unique
        icon_url:
          type: string
          nullable: true
          description: Path to the icon of the category
      required:
        - name
    Login-email:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email
          example: user@email.com
        password:
          type: string
          description: User password
      required:
        - email
        - password
    Order-create:
      title: OrderCreate
      type: object
      description: Model representing user input to create order
      properties:
        shipment:
          $ref: '#/components/schemas/Shipment-create'
        payment:
          $ref: '#/components/schemas/Payment-create'
        carts:
          type: array
          description: Array of carts id
          # items:
          #   type: string
          #   format: uuid
      required:
        - shipment
        - payment
        - carts
    Order-summary:
      title: Order
      type: object
      description: Model representing order
      properties:
        id:
          type: string
          format: uuid
        transaction_number:
          type: string
        order_events:
          type: array
          items:
            type: object
          nullable: true
        payment:
          $ref: '#/components/schemas/Payment-summary'
        carts:
          type: array
          items:
            $ref: '#/components/schemas/Cart-summary'
        status:
          type: string
          enum:
            - ORDERED
            - PAID
            - CANCELED
            - PROCESSED
            - COMPLETED
            - EXPIRED
            - DELIVERED
            - ONGOING
        expired_at:
          type: string
          format: date-time
        created:
          type: string
          format: date-time
      required:
        - id
        - transaction_number
        - payment
        - status
    Order-update:
      title: OrderUpdate
      type: object
      description: Model representing user input to update order
      x-examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          transaction_number: '123456.89012'
          user_id: a169451c-8525-4352-b8ca-070dd449a1a5
          shipment_id: e415c869-52a9-4dbd-bb4b-c8a6b3968a51
          payment_id: d43b87f9-9e28-4802-8eaa-6ee91a40ea71
          status: ORDERED
          order_events:
            [
              {
                type: 'ORDER',
                status: 'ORDERED',
                timestamp: '2019-08-24T14:15:22Z',
                transaction_number: 'DPLUS01',
                email: 'admin@admin.com'
              }
            ]
          carts:
            - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              product_id: 0d012afa-f885-4e65-aeca-37e27701e2d1
              user_id: a169451c-8525-4352-b8ca-070dd449a1a5
              location: Bekasi
              quantity: 5
              status: ACTIVE
              final_unit_price: 1000000
              order_id: 93101167-9065-4b9c-b98b-5d789a3ed9fe
              created: '2019-08-24T14:15:22Z'
              updated: '2019-08-24T14:15:22Z'
          expired_at: '2019-08-24T14:15:22Z'
          created: '2019-08-24T14:15:22Z'
          updated: '2019-08-24T14:15:22Z'
      properties:
        payment:
          $ref: '#/components/schemas/Payment-update'
      required:
        - payment
    Outlet-address-create-update:
      title: OutletAddressCreateUpdate
      type: object
      description: User input schema for outlet address
      x-examples:
        example-1:
          value:
            id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
            label: Apotek XYZ
            receiver_name: John Doe
            mobile_phone: '1132423452'
            province: DKI Jakarta
            city: Jakarta Selatan
            district: Kebayoran Baru
            subdistrict: Pulo
            postal_code: 123456
            full_address: Jl Street No 20
            status: ACTIVE
            is_main: true
            user_id: a169451c-8525-4352-b8ca-070dd449a1a5
            deleted_at: '2019-08-24T14:15:22Z'
            created: '2019-08-24T14:15:22Z'
            updated: '2019-08-24T14:15:22Z'
      properties:
        label:
          type: string
        receiver_name:
          type: string
        mobile_phone:
          type: string
        province:
          type: string
        city:
          type: string
        district:
          type: string
        subdistrict:
          type: string
        postal_code:
          type: number
        full_address:
          type: string
        notes:
          type: string
      required:
        - full_address
        - city
        - province
    Outlet-address-summary:
      title: OutletAddressSummary
      type: object
      description: Model representing outlet address for shipment
      x-examples:
        example-1:
          value:
            id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
            label: Apotek XYZ
            receiver_name: John Doe
            mobile_phone: '1132423452'
            province: DKI Jakarta
            city: Jakarta Selatan
            district: Kebayoran Baru
            subdistrict: Pulo
            postal_code: 123456
            full_address: Jl Street No 20
            status: ACTIVE
            is_main: true
            user_id: a169451c-8525-4352-b8ca-070dd449a1a5
            deleted_at: '2019-08-24T14:15:22Z'
            created: '2019-08-24T14:15:22Z'
            updated: '2019-08-24T14:15:22Z'
      properties:
        label:
          type: string
          nullable: true
        receiver_name:
          type: string
          nullable: true
        province:
          type: string
        city:
          type: string
        district:
          type: string
          nullable: true
        subdistrict:
          type: string
          nullable: true
        postal_code:
          type: number
          nullable: true
        full_address:
          type: string
        notes:
          type: string
          nullable: true
      required:
        - label
        - province
        - city
        - full_address
    Outlet-admin-update:
      type: object
      properties:
        status:
          type: string
          example: DECLINED
      required:
        - status
    Outlet-doc-request:
      type: object
      properties:
        name:
          type: string
          description: docs name
          example: SIUP
        expired_date:
          type: object
          description: expired date
          example: '2021-06-14T00:00:0000z'
        file_no:
          type: string
          description: Doc No.
          example: 02/DAS/3980
        path:
          type: string
          format: binary
      required:
        - name
        - type
        - file_no
    Outlet-doc-update:
      type: object
      properties:
        name:
          type: string
          description: docs name
          example: SIUP
        expired_date:
          type: string
          description: expired date
          example: '2021-06-14T00:00:0000z'
        file_no:
          type: string
          description: Doc No.
          example: 02/DAS/3980
        file:
          type: string
    Outlet-request:
      type: object
      properties:
        name:
          type: string
          description: User name
          example: John
        type:
          type: string
          description: Outlet Type
          example: Apotek
        npwp:
          type: string
          description: Outlet NPWP / Nomor Pokok Wajib Pajak
          example: '1234567890'
        mobile_phone:
          type: string
          description: Outlet Mobile Phone
          example: '1234567890'
        telephone:
          type: string
          description: Outlet Office Phone
          example: John Doe
      # required:
      #   - name
      #   - type
      #   - npwp
      #   - telephone
      #   - mobile_phone
    Payment-create:
      title: PaymentCreate
      type: object
      description: Model representing user input when creating payment
      properties:
        total_price:
          type: number
        payment_method:
          type: string
          nullable: true
          enum:
            - XENDIT_VA
            - BANK_TRANSFER
            - null
        payment_type:
          type: string
        account_name:
          type: string
          nullable: true
        account_number:
          type: string
          nullable: true
        payment_channel:
          type: string
          nullable: true
      required:
        - total_price
        - payment_type
    Payment-update:
      title: PaymentUpdate
      type: object
      description: Model representing user input when updating payment
      properties:
        total_price:
          type: number
        payment_method:
          type: string
          enum:
            - XENDIT_VA
            - BANK_TRANSFER
        account_name:
          type: string
          nullable: true
        account_number:
          type: string
          nullable: true
        payment_channel:
          type: string
          nullable: true
      required:
        - total_price
        - payment_method
    Payment-summary:
      title: PaymentSummary
      type: object
      description: Model representing summary payment for an order summary
      properties:
        id:
          type: string
          format: uuid
        total_amount:
          type: number
        type:
          type: string
        method:
          type: string
          nullable: true
        status:
          type: string
      required:
        - total_amount
        - type
        - status
    Product-create:
      title: ProductCreate
      type: object
      description: User input schema for adding new product
      x-examples:
        CDR:
          value:
            name: CDR (Calcium-D-Redoxon) ahlinya kalsium suplemen makanan
            sku_number: 000.987.123.456
            company_name: CDR
            description: Suplemen makanan
            unit: PC
            price: 50000
            category_id:
              - Kesehatan
            valid_to: 2019-08-24T14:15:22Z'
      properties:
        name:
          type: string
          description: Product title
        picture:
          type: array
          description: Path to picture file
        sku_number:
          type: string
          description: Product's SKU number
        company_name:
          type: string
          description: Product's brand
        description:
          type: string
          description: Description about the product
        unit:
          type: string
          description: Unit of the product
        price:
          type: integer
          description: Price per unit of product
        discount_percentage:
          type: integer
          description: Percentage of the discount. Fill one of this or the discount_price.
        discount_price:
          type: integer
          description: Discount amount. Fill one of this or the discount_percentage.
        categories:
          type: array
          description: Array of categories name
          items:
            type: string
        valid_to:
          type: string
          description: Last valid date of a product
      required:
        - name
        - sku_number
        - company_name
        - unit
        - price
    Product-summary:
      title: ProductSummary
      type: object
      x-examples:
        CDR:
          value:
            name: CDR (Calcium-D-Redoxon) ahlinya kalsium suplemen makanan
            picture_url: cdr-pic-01
            company_name: CDR
            unit: PC
            slug: cdr-ahlinya-kalsium-suplemen
            price: 50000
      description: Model representing summary information of product for carts & order
      properties:
        id:
          type: string
          description: Id of the product
        name:
          type: string
          description: Product title
        picture_url:
          type: string
          nullable: true
          description: Path to picture file
        slug:
          type: string
        unit:
          type: string
          description: Unit of the product
        price:
          type: integer
          nullable: true
          description: Price per unit of product
        discount_percentage:
          type: integer
          nullable: true
          description: Percentage of the discount
        discount_price:
          type: integer
          nullable: true
          description: Discount amount
        discount_type:
          type: string
          nullable: true
          enum:
            - PRICE
            - PERCENTAGE
            - null
          description: Type of the discount to be shown
      required:
        - name
        - slug
        - unit
    Product-top:
      title: ProductTop
      type: object
      x-examples:
        CDR:
          value:
            name: CDR (Calcium-D-Redoxon) ahlinya kalsium suplemen makanan
            picture_url: cdr-pic-01
            company_name: CDR
            unit: PC
            slug: cdr-ahlinya-kalsium-suplemen
            price: 50000
      description: Model representing summary information of product for carts & order
      properties:
        id:
          type: string
          description: Id of the product
          nullable: true
        name:
          type: string
          description: Product title
          nullable: true
        picture_url:
          type: string
          nullable: true
          description: Path to picture file
        slug:
          type: string
          nullable: true
        unit:
          type: string
          description: Unit of the product
          nullable: true
        price:
          type: integer
          nullable: true
          description: Price per unit of product
        discount_percentage:
          type: integer
          nullable: true
          description: Percentage of the discount
        discount_price:
          type: integer
          nullable: true
          description: Discount amount
        discount_type:
          type: string
          nullable: true
          enum:
            - PRICE
            - PERCENTAGE
            - null
          description: Type of the discount to be shown
    Product-update:
      title: ProductUpdate
      type: object
      description: User input schema for updating product
      x-examples:
        CDR:
          value:
            description: Suplemen makanan
            unit: PC
            price: 50000
            category_id:
              - Kesehatan
      properties:
        description:
          type: string
          nullable: true
          description: Description about the product
        unit:
          type: string
          nullable: true
          description: Unit of the product
        discount_percentage:
          type: integer
          nullable: true
          description: Percentage of the discount. Fill one of this or the discount_price.
        discount_price:
          type: integer
          nullable: true
          description: Discount amount. Fill one of this or the discount_percentage.
        price:
          type: integer
          nullable: true
          description: Field to change the price received from SAP.
        categories:
          type: array
          nullable: true
          description: Array of categories name
          items:
            type: string
        status:
          type: string
          nullable: true
          enum:
            - ACTIVE
            - INACTIVE
            - null
        valid_to:
          type: string
          nullable: true
        dpf:
          type: string
          nullable: true
        discount_end_date:
          type: string
          format: date
          nullable: true
    Shipment-create:
      title: ShipmentCreate
      type: object
      description: Model representing user input when creating shipment
      properties:
        address_id:
          type: string
          format: uuid
        location:
          type: string
      required:
        - address_id
        - location
    Stock-create-update:
      title: stock-create-update
      type: object
      description: Model representing user input for stock
      properties:
        product_id:
          type: string
        location:
          type: string
          description: Location of the warehouse
        stock_in:
          type: number
          description: Total stock added to this location
        stock_out:
          type: number
          description: Total stock added to this location
      required:
        - product_id
        - location
    Bank-account:
      title: BankAccounts
      type: object
      description: Model representing bank account of users
      x-examples:
        example-1:
          value:
            id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
            bank_name: BCA
            account_number: Joe Doe
            account_name: '678901234'
            branch_name: Jakarta Melawai
            user_id: a169451c-8525-4352-b8ca-070dd449a1a5
            status: ACTIVE
            deleted_at: '2019-08-24T14:15:22Z'
            created: '2019-08-24T14:15:22Z'
            updated: '2019-08-24T14:15:22Z'
      properties:
        id:
          type: string
          format: uuid
        bank_name:
          type: string
          description: ''
        account_number:
          type: string
        account_name:
          type: string
        branch_name:
          type: string
        user_id:
          type: string
          format: uuid
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        deleted_at:
          type: string
          format: date-time
          description: Soft deletion time of bank account
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
      required:
        - id
        - bank_name
        - account_number
        - account_name
        - branch_name
        - user_id
        - status
    Cart:
      title: Cart
      type: object
      description: Model representing user's cart
      x-examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          product_id: 0d012afa-f885-4e65-aeca-37e27701e2d1
          user_id: a169451c-8525-4352-b8ca-070dd449a1a5
          location: Bekasi
          quantity: 5
          status: ACTIVE
          final_unit_price: 1000000
          order_id: 93101167-9065-4b9c-b98b-5d789a3ed9fe
          created: '2019-08-24T14:15:22Z'
          updated: '2019-08-24T14:15:22Z'
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        location:
          type: string
          description: location of the source warehouse
        product:
          $ref: '#/components/schemas/Product-summary'
        quantity:
          type: number
        final_unit_price:
          type: number
        discount_percentage:
          type: number
          nullable: true
        order_id:
          type: string
          format: uuid
          nullable: true
        status:
          type: string
          enum:
            - ACTIVE
            - DELETED
            - ORDERED
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
      required:
        - id
        - user_id
        - location
        - product
        - quantity
        - status
    Cart-batch:
      title: Cart-batch
      type: object
      description: Model that representing batch numbers of product in a cart
      properties:
        id:
          type: string
        carts_id:
          type: string
        batch_no:
          type: string
        exp_date:
          type: string
          format: date-time
        quantity:
          type: number
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    Cart-batch-id:
      title: Cart-batch-id
      type: object
      description: Model that representing batch numbers of product in a cart by carts_id
      properties:
        id:
          type: string
        carts_id:
          type: string
        batch_no:
          type: string
        exp_date:
          type: string
        quantity:
          type: number
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    Cart-batch-create:
      title: Cart-batch-create
      type: object
      description: Creating batch numbers of product in a cart
      properties:
        carts_id:
          type: string
        batch_no:
          type: string
        exp_date:
          type: string
          format: date-time
        quantity:
          type: number
    Category:
      title: Category
      type: object
      description: Model representing category of product
      x-examples:
        Kesehatan:
          value:
            id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
            name: Kesehatan
            icon_url: category/medicine.jpeg
            created: '2019-08-24T14:15:22Z'
            updated: '2019-08-24T14:15:22Z'
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Name of the category. This value should be unique
        icon_url:
          type: string
          nullable: true
          description: Path to the icon of the category
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
      required:
        - id
        - name
    Order:
      title: Order
      type: object
      description: Model representing order
      x-examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          transaction_number: '123456.89012'
          user_id: a169451c-8525-4352-b8ca-070dd449a1a5
          shipment_id: e415c869-52a9-4dbd-bb4b-c8a6b3968a51
          payment_id: d43b87f9-9e28-4802-8eaa-6ee91a40ea71
          status: ORDERED
          carts:
            - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
              product_id: 0d012afa-f885-4e65-aeca-37e27701e2d1
              user_id: a169451c-8525-4352-b8ca-070dd449a1a5
              location: Bekasi
              quantity: 5
              status: ACTIVE
              final_unit_price: 1000000
              order_id: 93101167-9065-4b9c-b98b-5d789a3ed9fe
              created: '2019-08-24T14:15:22Z'
              updated: '2019-08-24T14:15:22Z'
          expired_at: '2019-08-24T14:15:22Z'
          created: '2019-08-24T14:15:22Z'
          updated: '2019-08-24T14:15:22Z'
      properties:
        id:
          type: string
          format: uuid
        transaction_number:
          type: string
        order_events:
          type: array
          items:
            type: object
          nullable: true
        user_id:
          type: string
          format: uuid
        shipment:
          $ref: '#/components/schemas/Shipment'
        payment:
          $ref: '#/components/schemas/Payment'
        carts:
          type: array
          items:
            $ref: '#/components/schemas/Cart-summary'
        status:
          type: string
          enum:
            - ORDERED
            - PROCESSED
            - DELIVERED
            - COMPLETED
            - CANCELED
            - ONGOING
        expired_at:
          type: string
          format: date-time
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
      required:
        - id
        - transaction_number
        - user_id
        - shipment
        - payment
        - status
    Order-receipt:
      title: Order-receipt
      type: array
      description: Model representing order receipt
      items:
        $ref: '#/components/schemas/Order-faktur'
    Order-faktur:
      title: Order-faktur
      type: object
      description: Model representing order faktur
      properties:
        id:
          type: string
          format: uuid
        transaction_number:
          type: string
        order_events:
          type: array
          items:
            type: object
          nullable: true
        user_id:
          type: string
          format: uuid
        shipment:
          $ref: '#/components/schemas/Shipment'
        user:
          $ref: '#/components/schemas/User'
        payment:
          $ref: '#/components/schemas/Payment'
        payment_terms:
          $ref: '#/components/schemas/Payment-terms-name'
        carts:
          type: array
          items:
            $ref: '#/components/schemas/Cart-summary'
        carts_batch:
          type: array
          items:
            $ref: '#/components/schemas/Cart-batch'
        status:
          type: string
          enum:
            - ORDERED
            - PROCESSED
            - DELIVERED
            - COMPLETED
            - CANCELED
            - ONGOING
        expired_at:
          type: string
          format: date-time
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    Outlet-address:
      title: OutletAddress
      type: object
      description: Model representing outlet address
      x-examples:
        example-1:
          value:
            id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
            label: Apotek XYZ
            receiver_name: John Doe
            mobile_phone: '1132423452'
            province: DKI Jakarta
            city: Jakarta Selatan
            district: Kebayoran Baru
            subdistrict: Pulo
            postal_code: 123456
            full_address: Jl Street No 20
            status: ACTIVE
            is_main: true
            user_id: a169451c-8525-4352-b8ca-070dd449a1a5
            deleted_at: '2019-08-24T14:15:22Z'
            created: '2019-08-24T14:15:22Z'
            updated: '2019-08-24T14:15:22Z'
      properties:
        id:
          type: string
          format: uuid
        label:
          type: string
          nullable: true
        receiver_name:
          type: string
        mobile_phone:
          type: string
        province:
          type: string
        city:
          type: string
        district:
          type: string
        subdistrict:
          type: string
        postal_code:
          type: number
          nullable: true
        full_address:
          type: string
        notes:
          type: string
          nullable: true
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        is_main:
          type: boolean
          description: >-
            Indicator if this address will be main address for the user. Default
            is false except where there's only one address
        user_id:
          type: string
          format: uuid
          description: ''
        deleted_at:
          type: string
          nullable: true
          description: Soft deletion timestamp
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
      required:
        - id
        - label
        - receiver_name
        - mobile_phone
        - province
        - city
        - district
        - subdistrict
        - postal_code
        - full_address
        - status
    Outlet-doc:
      type: object
      properties:
        id:
          type: string
          example: '1234'
        name:
          type: string
          description: docs name
          example: SIUP
        expired_date:
          type: string
          description: expired date
          nullable: true
          example: '2021-08-01'
        outlet_id:
          type: string
          description: Outlet Id
          example: '1234567890'
          nullable: true
        file_no:
          type: string
          description: Doc No.
          example: 02/DAS/3980
          nullable: true
        path:
          type: string
          description: docs url path
          example: 'http://localhost:3000/test'
          nullable: true
        status:
          type: string
          description: status docs
          example: PENDING
        created:
          type: object
          example: '2021-08-01'
        updated:
          type: object
          example: '2021-08-01'
      required:
        - id
        - outlet_id
        - expired_date
        - name
        - status
        - path
        - file_no
      title: ''
    Outlet:
      type: object
      properties:
        id:
          type: string
          example: '1234'
        name:
          type: string
          description: User name
          example: John
        type:
          type: string
          description: Outlet Type
          example: Apotek
        npwp:
          type: string
          nullable: true
          description: Outlet NPWP / Nomor Pokok Wajib Pajak
          example: '1234567890'
        mobile_phone:
          type: string
          description: Outlet Mobile Phone
          example: '1234567890'
        telephone:
          type: string
          description: Outlet Home Phone
          example: John Doe
        created:
          type: object
          example: '2021-08-01'
        updated:
          type: object
          example: '2021-08-01'
      required:
        - id
        - name
        - type
        - npwp
        - telephone
        - mobile_phone
    Payment:
      title: Payment
      type: object
      description: Model representing payment for an order
      properties:
        id:
          type: string
        total_amount:
          type: number
        product_price:
          type: number
        shipment_fee:
          type: number
        tax:
          type: number
        order_discount:
          type: number
        unique_amount:
          type: number
        channel_fee:
          type: number
        type:
          type: string
        method:
          type: string
          nullable: true
        channel:
          type: string
          nullable: true
        account_name:
          type: string
          nullable: true
        account_number:
          type: string
          nullable: true
        reference_number:
          type: string
          nullable: true
        status:
          type: string
        paid_at:
          type: string
          nullable: true
          format: date-time
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        # invoice_no:
        #   type: string
        # invoice_date:
        #   type: string
        #   format: date-time
      required:
        - id
        - total_amount
        - type
        - status
    Payment-invoice:
      title: Payment invoice
      type: object
      description: Model representing invoice of a payment for an order
      properties:
        id:
          type: string
        invoice_no:
          type: string
        invoice_date:
          type: string
          format: date-time
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    Payment-terms:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        days_due:
          type: number
        status:
          type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    Payment-terms-name:
      type: object
      properties:
        name:
          type: string
    Payment-terms-update:
      type: object
      properties:
        name:
          type: string
        days_due:
          type: number
    Payment-terms-change:
      type: object
      properties:
        status:
          type: string
    Payment_events:
      title: PaymentEvents
      type: object
      description: Model representing events of payment
      properties:
        event:
          type: string
          enum:
            - CREATED
            - PAID
            - FAILED
            - CREATE_VA
            - UPDATED
            - EXPIRED
            - REFUNDED
        timestamp:
          type: string
          format: date-time
      required:
        - event
        - timestamp
    Product:
      title: Product
      type: object
      x-examples:
        CDR:
          value:
            id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
            name: CDR (Calcium-D-Redoxon) ahlinya kalsium suplemen makanan
            picture_url: cdr-pic-01
            sku_number: 000.987.123.456
            company_name: CDR
            description: Suplemen manakan
            unit: PC
            slug: cdr-ahlinya-kalsium-suplemen
            price: 50000
            discount_percentage: null
            discount_price: null
            discount_type: null
            status: ACTIVE
            categories:
              - Kesehatan
            valid_to: '2019-08-24T14:15:22Z'
            created: '2019-08-24T14:15:22Z'
            updated: '2019-08-24T14:15:22Z'
      description: Model representing product
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Product title
        picture_url:
          type: string
          nullable: true
          description: Path to picture file
        sku_number:
          type: string
          description: Product's SKU number
        company_name:
          type: string
          description: Product's brand
        description:
          type: string
          nullable: true
          description: Description about the product
        unit:
          type: string
          description: Unit of the product
        slug:
          type: string
          description: Slug url of the product
        price:
          type: integer
          nullable: true
          description: Price per unit of product
        sap_price:
          type: integer
          nullable: true
          description: Price per unit of product
        discount_percentage:
          type: integer
          nullable: true
          description: Percentage of the discount
        discount_price:
          type: integer
          nullable: true
          description: Discount amount
        discount_type:
          type: string
          nullable: true
          enum:
            - PRICE
            - PERCENTAGE
            - null
          description: Type of the discount to be shown
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
          description: Status of the product
        categories:
          type: array
          description: Array of categories name
          items:
            $ref: '#/components/schemas/Category-summary'
        valid_to:
          type: string
          nullable: true
          format: date-time
          description: last valid date for a product
        sold:
          nullable: true
          type: integer
        is_favorite:
          nullable: true
          type: boolean
        is_flash_sale:
          nullable: true
          type: boolean
        dpf:
          nullable: true
          type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
      required:
        - id
        - name
        - sku_number
        - company_name
        - unit
        - slug
        - status
    Shipment:
      title: Shipment
      type: object
      description: Model representing a shipment for an order
      properties:
        id:
          type: string
          format: uuid
        address:
          $ref: '#/components/schemas/Outlet-address-summary'
        courier:
          type: string
        track_number:
          type: string
        delivery_date:
          type: string
          nullable: true
          format: date-time
        receive_date:
          type: string
          nullable: true
          format: date-time
        receiver_name:
          type: string
          nullable: true
        location:
          type: string
        price:
          type: number
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
      required:
        - id
        - address
        - courier
        - track_number
        - location
        - price
    Stock:
      title: Stock
      type: object
      description: Model representing product's stock
      x-examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          product_id: 497f6eca-4993-4993-4993-53cbbbba6f08
          location: Jakarta
          stock_in: 10
          stock_out: 0
          created: '2019-08-24T14:15:22Z'
          updated: '2019-08-24T14:15:22Z'
      properties:
        id:
          type: string
          format: uuid
        product_id:
          type: string
        location:
          type: string
          description: Location of the warehouse
        stock_in:
          type: number
          description: Total stock added to this location
          default: 0
        stock_out:
          type: number
          description: Total stock added to this location
          default: 0
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
      required:
        - id
        - product_id
        - location
        - stock_in
        - stock_out
    User:
      type: object
      properties:
        outlet:
          $ref: '#/components/schemas/Outlet'
        id:
          type: string
          example: '1234'
        email:
          type: string
          format: email
          description: User email
          example: user@email.com
        birthdate:
          nullable: true
          type: string
          description: User Birth Date
          example: '2021-08-01'
        ktp:
          type: string
          nullable: true
          description: User's KTP Id
          example: '12345'
        user_address:
          type: string
          nullable: true
          description: User Address
          example: 'jakarta'
        gender:
          nullable: true
          type: string
          description: User Gender
          example: Female
        phone_number:
          type: string
          description: phone number using E.164 format.
          example: +6281324356877
        name:
          type: string
          description: User Name
          example: John Doe
        role_status:
          type: string
          description: User Role
          example: BASIC_USER
        login_provider:
          type: string
          example: MANUAL / GOOGLE
        photo_url:
          type: string
          nullable: true
          example: http://picture/1.com
        created:
          type: object
          example: '2021-08-01'
        updated:
          type: object
          example: '2021-08-01'
      required:
        - id
        - email
        - phone_number
        - name
        - role_status
        - login_provider
    customer_sap:
      type: object
      properties:
        noref_dplus:
          type: string
        name:
          type: string
        vat_reg_no:
          type: string
        address:
          type: string
        telephone:
          type: string
        email:
          type: string
        sales_office:
          type: string
        status:
          type: string
        tgldata:
          type: string
    User-Google:
      type: object
      properties:
        email:
          type: string
          example: '1234'
      required:
        - email
    User-admin-update:
      type: object
      properties:
        role_status:
          type: string
          description: User Role
          example: USER_DECLINED
      required:
        - role_status
    User-info:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
    User-info-google:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User-Google'
    User-request:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email
          example: user@email.com
        password:
          type: string
          description: User password
        birthdate:
          type: string
          description: User Birth Date
          example: '2021-10-12'
        gender:
          nullable: true
          type: string
          description: User Gender
          example: Female
        phone_number:
          type: string
          pattern: ^\+[1-9]\d{10,14}$
          description: phone number using E.164 format.
          example: +6281324356877
        name:
          type: string
          description: User Name
          example: John Doe
        google_token:
          nullable: true
          type: string
          description: User Name
          example: John Doe
      required:
        - email
        - phone_number
        - password
        - name
    User-request-admin:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email
          example: user@email.com
        password:
          type: string
          description: User password
        birthdate:
          type: string
          description: User Birth Date
          example: '2021-10-12'
        gender:
          nullable: true
          type: string
          description: User Gender
          example: Female
        phone_number:
          type: string
          pattern: ^\+[1-9]\d{10,14}$
          description: phone number using E.164 format.
          example: +6281324356877
        name:
          type: string
          description: User Name
          example: John Doe
        google_token:
          nullable: true
          type: string
          description: User Name
          example: John Doe
      required:
        - email
        - password
        - name
    User-session:
      type: object
      description: User Session
      properties:
        token:
          type: string
        refresh_token:
          type: string
      required:
        - token
        - refresh_token
      x-examples:
        example-1:
          token: SOME_TOKEN
          refresh_token: SOME_REFRESH_TOKEN
    User-update-password:
      type: object
      properties:
        new_password:
          type: string
          description: User New Password
          example: Test
        old_password:
          type: string
          description: User Old Password
          example: Test
      required:
        - new_password
        - old_password
    User-update-request:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email
          example: user@email.com
        birthdate:
          type: string
          description: User Birth Date
        gender:
          nullable: true
          type: string
          description: User Gender
          example: Female
        phone_number:
          type: string
          description: User Phone Number
          example: '1234567890'
        name:
          type: string
          description: User Name
          example: John Doe
        ktp:
          nullable: true
          type: string
          description: User Name
          example: John Doe
      required:
        - email
        - name
        - phone_number
    Verified-user-email:
      type: object
      properties:
        token:
          type: string
          description: Token that send to their email
      required:
        - token
    Notification-List:
      type: object
      properties:
        message:
          type: string
          description: Message for the notification
        seen:
          type: boolean
          description: A flag to identify whether the notification has been seen or not
        user:
          $ref: '#/components/schemas/User'
        order:
          type: object
          nullable: true
          properties:
            id:
              type: string
            transaction_number:
              type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Banner-List:
      type: object
      properties:
        image:
          type: string
        id:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Product-review:
      title: ProductReview
      type: object
      description: Model representing review for each product
      properties:
        id:
          type: string
          description: Id of the review
        notes:
          type: string
          description: Notes of the review
        rating:
          type: integer
          nullable: true
          description: Rating of the review
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Flash-sale:
      type: object
      properties:
        id:
          type: string
        notes:
          type: string
          nullable: true
        status:
          type: string
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Product-review-create:
      title: ProductReviewCreate
      type: object
      properties:
        notes:
          type: string
          nullable: true
          description: Notes of the review
        rating:
          type: integer
          nullable: true
          description: Rating of the review
        product_id:
          type: string
          description: Product that user reviewed
        order_id:
          type: string
          description: Order that user order the product
    Flash-sale-create:
      title: FlashSaleCreate
      type: object
      properties:
        notes:
          type: string
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
    User-chat:
      type: object
      properties:
        text:
          type: string
          description: text for chat
    Admin-chat:
      type: object
      properties:
        user_id:
          type: string
        text:
          type: string
    Admin-chat-read:
      type: object
      properties:
        user_id:
          type: string
    News:
      type: object
      properties:
        content:
          type: string
        title:
          type: string
        image:
          type: string
        slug:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
    Branch:
      type: integer
      properties:
        stock:
          type: integer
    News-create:
      type: object
      properties:
        content:
          type: string
        title:
          type: string
        image:
          type: string
    Outlet-types:
      type: object
      properties:
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Outlet-types-create:
      type: object
      properties:
        name:
          type: string
    Promotions:
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
          nullable: true
        name:
          type: string
        start_date:
          type: string
        end_date:
          type: string
        type:
          type: string
        min_purchase:
          type: integer
        max_usage_promo:
          type: integer
        max_usage_user:
          type: integer
        discount_percentage:
          type: string
        max_discount_amount:
          type: integer
        status:
          type: string
        promotion_products:
          type: array
          items:
            $ref: '#/components/schemas/Promotion-products'
    Promotions-create:
      title: PromotionCreate
      type: object
      description: User input schema for adding new product
      x-examples:
        PROMO1:
          value:
            code: PROMO1
            name: PROMO1
            start_date: 2021-01-01
            end_date: 2021-05-01
            type: TIERED
            max_usage_promo: 100
            max_usage_user: 50
            status: ACTIVE
      properties:
        code:
          type: string
          description: Promotion code
        name:
          type: string
          description: Promotion title
        start_date:
          type: string
          description: Promotion start date
        end_date:
          type: string
          description: Promotion end date
        type:
          type: string
          description: Promotion type
          enum:
            - TIERED
            - CODE
        min_purchase:
          type: integer
          description: Minimal order purchase to activate promo
        max_usage_promo:
          type: integer
          description: Promotion max usage promo by all
        max_usage_user:
          type: integer
          description: Promotion max usage promo by user
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
          description: Promotion status
        discount_percentage:
          type: string
        max_discount_amount:
          type: integer
      required:
        - name
        - start_date
        - end_date
        - type
    Promotion-products:
      type: object
      properties:
        promotion_id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        status:
          type: string
        percentage:
          type: string
        qty_min:
          type: integer
        qty_max:
          type: integer
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        product:
          $ref: '#/components/schemas/Product'
    Promotions-products-create:
      title: PromotionProductCreate
      type: object
      description: User input schema for adding new promotion detail
      x-examples:
        PROMO1:
          value:
            code: PROMO1
            name: PROMO1
            start_date: 2021-01-01
            end_date: 2021-05-01
            type: TIERED
            max_usage_promo: 100
            max_usage_user: 50
            status: ACTIVE
      properties:
        promotion_id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        status:
          type: string
        percentage:
          type: string
        qty_min:
          type: integer
        qty_max:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - product_id
        - qty_min
        - qty_max
        - percentage
    Card-charge-payment:
      type: object
      properties:
        tokenID:
          type: string
        authID:
          type: string
        cardCvn:
          type: string
        externalID:
          type: string
          format: uuid
        promoCode:
          type: string
      required:
        - tokenID
        - authID
        - cardCvn
        - externalID
    Charge-payment-success:
      type: object
    Boolean:
      type: object
